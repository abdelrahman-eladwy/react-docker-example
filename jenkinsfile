pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDS = credentials('docker-hub-credentials')
        DOCKER_IMAGE_NAME = "abdelrahmaneladwy/react-app"
        DOCKER_IMAGE_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build React App') {
            steps {
                sh '''
                if [ ! -d "node_modules" ]; then npm install; fi
                npm run build
                '''
    }
        }
        
        stage('Run Tests') {
            steps {
                sh 'npm test -- --watchAll=false'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."
                sh "docker tag ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ${DOCKER_IMAGE_NAME}:latest"
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                sh "echo ${DOCKER_HUB_CREDS_PSW} | docker login -u ${DOCKER_HUB_CREDS_USR} --password-stdin"
                sh "docker push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                sh "docker push ${DOCKER_IMAGE_NAME}:latest"
            }
        }
        
        stage('Deploy') {
            steps {
                echo "Deploying Docker image ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                
                // Placeholder for deployment commands
                // Example: SSH into the server and update the container
                // sh 'ssh user@server "docker pull ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} && docker stop old_container && docker run -d --name new_container ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"'
            }
        }
    }
    
    post {
        always {
            sh 'if docker info > /dev/null 2>&1; then docker logout; fi'
            cleanWs()
        }
    }
}